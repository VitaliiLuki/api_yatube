openapi: 3.0.2
info:
  title: Yatube API documentation
  version: v1
paths:
  /api/v1/posts/:
    get:
      operationId: Getting a posts
      description: >-
        To get all list of posts.
      parameters:
        - name: limit
          required: false
          in: query
          description: Number of posts per page
          schema:
            type: integer
        - name: offset
          required: false
          in: query
          description: Page number after which to start issuing
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetPost'
              examples:
                Ответ с пагинацией:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?offset=400&limit=100
                    previous: http://api.example.org/accounts/?offset=200&limit=100
                    results:
                      -
                        id: 0
                        author: string
                        text: string
                        pub_date: 2021-10-14T20:41:29.648Z
                        image: string
                        group: 0            
          description: 'Successful execution of the request'
      tags:
        - api
    post:
      operationId: Post creation 
      description: >-
        Adding a new post. Anonymous requests are prohibited.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: 'Successful execution of the request'
        '400':
          content:
            application/json:
              examples:
                '400':
                  value:
                    text:
                      - Field is required.
          description: Required field is missing.
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request from anonymous user.
      tags:
        - api
  '/api/v1/posts/{id}/':
    get:
      operationId: Getting a post
      description: Getting a post by id.
      parameters:
        - name: id
          in: path
          required: true
          description: Post id
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: 'Successful execution of the request'
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found.
          description: Attempted to request a non-existent publication
      tags:
        - api
    put:
      operationId: Update post
      description: >-
        Update post by id. Update post is allowed only for author.
      parameters:
        - name: id
          in: path
          required: true
          description: post id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: 'Successful execution of the request'
        '400':
          content:
            application/json:
              examples:
                '400':
                  value:
                    text:
                      - Required field.
          description: Required field is missing.
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request from anonymous user.
        '403':
          content:
            application/json:
              examples:
                '403':
                  value:
                    detail: You haven't rights for perform this action.
          description: Attempt to change someone else's content.
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found
          description: Attempted to change a non-existent publication
      tags:
        - api
    patch:
      operationId: Partial post update
      description: >-
        Partial post update by id. Only the author of the post can update a post.
      parameters:
        - name: id
          in: path
          required: true
          description: post id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: 'Successful execution of the request'
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request from anonymous user.
        '403':
          content:
            application/json:
              examples:
                '403':
                  value:
                    detail: You haven't rights for perform this action.
          description: Attempt to change someone else's content.
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found
          description: Attempted to change a non-existent publication
      tags:
        - api
    delete:
      operationId: Deleting of post
      description: >-
        Deleting of post by id. Only the author of the post can delete a post.
      parameters:
        - name: id
          in: path
          required: true
          description: post id
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful execution of the request'
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request from anonymous user.
        '403':
          content:
            application/json:
              examples:
                '403':
                  value:
                    detail: You haven't rights for perform this action.
          description: Attempt to change someone else's content.
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found
          description: Attempt of deletion of non-existent post.
      tags:
        - api
  '/api/v1/posts/{post_id}/comments/':
    get:
      operationId: Getting a comments
      description: Getting a comments to a post.
      parameters:
        - name: post_id
          in: path
          required: true
          description: post id
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          description: 'Successful execution of the request'
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    {
                    "detail": "Page not found"
                    }
          description: Receiving a comment list to non-existent post.
      tags:
        - api
    post:
      operationId: Adding a comment.
      description: Adding a comment to a post. Anonymous requests are prohibited.
      parameters:
        - name: post_id
          in: path
          required: true
          description: post id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: 'Successful execution of the request'
        '400':
          content:
            application/json:
              examples:
                '400':
                  value:
                    text:
                      - Required field.
          description: Required field is missing
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request from anonymous user.
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found
          description: Attempt to add a comment to non-existent post.
      tags:
        - api
  '/api/v1/posts/{post_id}/comments/{id}/':
    get:
      operationId: Getting a comment
      description: Getting a comment to a post by id.
      parameters:
        - name: post_id
          in: path
          required: true
          description: post id
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: comment id
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: 'Successful execution of the request'
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found
          description: >-
            Attempt to request a non-existent comment or comment to non-existent post
      tags:
        - api
    put:
      operationId: Comment update
      description: >-
        Comment update to a post by id. Comment update is allowed only for comment author. 
        Anonymous requests are prohibited. 
      parameters:
        - name: post_id
          in: path
          required: true
          description: post id
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: comment id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: 'Successful execution of the request'
        '400':
          content:
            application/json:
              examples:
                '400':
                  value:
                    text:
                      - Required field
          description: Required field is missing
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request from anonymous user.
        '403':
          content:
            application/json:
              examples:
                '403':
                  value:
                    detail: You haven't rights for perform this action.
          description: Attempt to change someone else's content.
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found
          description: >-
            Attempt to change a non-existent comment or comment to non-existent post
      tags:
        - api
    patch:
      operationId: Partial comment update.
      description: >-
        Partial comment update to a post by id. Comment update is allowed only for comment author.
         Anonymous requests are prohibited.
      parameters:
        - name: post_id
          in: path
          required: true
          description: post id
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: comment id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: 'Successful execution of the request'
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request from anonymous user.
        '403':
          content:
            application/json:
              examples:
                '403':
                  value:
                    detail: You haven't rights for perform this action.
          description: Attempt to change someone else's content.
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found
          description: >-
            Attempt to change a non-existent comment or comment to non-existent post
      tags:
        - api
    delete:
      operationId: Comment deletion
      description: >-
        Comment deletion to post by id. Comment deletion is allowed only for comment author. 
        Anonymous requests are prohibited.
      parameters:
        - name: post_id
          in: path
          required: true
          description: post id
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: comment id
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful execution of the request'
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request from anonymous user.
        '403':
          content:
            application/json:
              examples:
                '403':
                  value:
                    detail: You haven't rights for perform this action.
          description: Attempt to change someone else's content.
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found
          description: >-
            Attempt to delete a non-existent comment or comment to non-existent post
      tags:
        - api
  /api/v1/groups/:
    get:
      operationId: Group list
      description: Group list receiving
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
          description: 'Successful execution of the request'
      tags:
        - api
  '/api/v1/groups/{id}/':
    get:
      operationId: Information about group
      description: Receiving information about group by id.
      parameters:
        - name: id
          in: path
          required: true
          description: group id
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: 'Successful execution of the request'
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found
          description: Attempt to request a non-existent group
      tags:
        - api
  /api/v1/follow/:
    get:
      operationId: Subscribtions
      description: >-
        Returns all user's subscriptions who made a request. Anonymous requests are prohibited.
      parameters:
        - name: search
          required: false
          in: query
          description: >-
            It is possible to search by subscriptions by the search parameter
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Follow'
          description: 'Successful execution of the request'
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request from anonymous user.
      tags:
        - api
    post:
      operationId: Подписка
      description: >-
        Subscription of the user on whose behalf the request is made for the user passed in the body of the request. 
        Anonymous requests are prohibited.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follow'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Follow'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Follow'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: 'Successful execution of the request'
        '400':
          content:
            application/json:
              examples:
                '400':
                  value:
                    following:
                      - Required field.
                Пользователь не существует:
                  value:
                    following:
                      - Object with username=... doesn't exist.
                Подписка на себя:
                  value:
                    following:
                      - To subscribe to yourself is forbidden!
          description: >-
            Required field is missing or not matching with requirements
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request from anonymous user.
      tags:
        - api
  /api/v1/users/:
    post:
      operationId: New user registration.
      description: |
        `username` and `password` fields must be unique.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  username:
                    type: string
                  password:
                    type: string
                required:
                - username
                - password
          description: 'Successful execution of the request'
        '400':
          content:
            application/json:
              schema:
                properties:
                  username:
                    type: string
                  password:
                    type: string
          description: 'A required field is missing or incorrect'
  /api/v1/jwt/create/:
    post:
      operationId: To get a JWT-token
      description: Getting a JWT-token.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: 'Successful execution of the request'
        '400':
          content:
            application/json:
              examples:
                '400':
                  value:
                    username:
                      - Required field.
                    password:
                      - Required field.
          description: Required field is missing.
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: No active account found with the given credentials
          description: The account that was passed does not exist.
      tags:
        - api
  /api/v1/jwt/refresh/:
    post:
      operationId: JWT-token refresh
      description: Refreshing of JWT-token.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh2'
          description: 'Successful execution of the request'
        '400':
          content:
            application/json:
              examples:
                '400':
                  value:
                    refresh:
                      - Required field.
          description: Required field is missing
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Token is invalid or expired
                    code: token_not_valid
          description: Invalid token was passed.
      tags:
        - api
  /api/v1/jwt/verify/:
    post:
      operationId: JWT-token check
      description: Checking of JWT-token.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
      responses:
        '200':
          description: 'Successful execution of the request'
        '400':
          content:
            application/json:
              examples:
                '400':
                  value:
                    token:
                      - Required field.
          description: Required field is missing
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Token is invalid or expired
                    code: token_not_valid
          description: Invalid token was passed.
      tags:
        - api
components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
          title: post id
          readOnly: true
        author:
          type: string
          title: username
          readOnly: true
        text:
          type: string
          title: text of post
        pub_date:
          type: string
          format: date-time
          readOnly: true
        image:
          type: string
          format: binary
          nullable: true
        group:
          type: integer
          title: group id
          nullable: true
      required:
        - text
    GetPost:
      type: object
      properties:
        id:
          type: integer
          title: post id
          readOnly: true
        author:
          type: string
          title: username
          readOnly: true
        text:
          type: string
          title: text of post
        pub_date:
          type: string
          format: date-time
          readOnly: true
        image:
          type: string
          format: binary
          nullable: true
        group:
          type: integer
          title: group id
          nullable: true
    Comment:
      type: object
      properties:
        id:
          type: integer
          title: comment id
          readOnly: true
        author:
          type: string
          title: username
          readOnly: true
        text:
          type: string
          title: text of comment
        created:
          type: string
          format: date-time
          readOnly: true
        post:
          type: integer
          title: post id
          readOnly: true
      required:
        - text
    Group:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        slug:
          type: string
          maxLength: 50
          pattern: '^[-a-zA-Z0-9_]+$'
        description:
          type: string
      required:
        - title
        - slug
        - description
    Follow:
      type: object
      properties:
        user:
          type: string
          title: username token owner
          readOnly: true
        following:
          type: string
          title: username
      required:
        - following
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
      required:
        - username
        - password
    Token:
      title: Token
      type: object
      properties:
        refresh:
          type: string
          title: refresh token
        access:
          type: string
          title: access token
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
          readOnly: true
      required:
        - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    TokenRefresh2:
      type: object
      properties:
        access:
          type: string
